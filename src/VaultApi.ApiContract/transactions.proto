syntax = "proto3";

option csharp_namespace = "Swisschain.Sirius.VaultApi.ApiContract.Transactions";

package swisschain.sirius.vaultApi.transactions;

import "google/protobuf/wrappers.proto";
import "google/protobuf/timestamp.proto";
import "common.proto";

service Transactions {
  rpc Get (GetTransactionSigningRequestRequest) returns (GetTransactionSigningRequestResponse);
  rpc Confirm (ConfirmTransactionSigningRequestRequest) returns (ConfirmTransactionSigningRequestResponse);
  rpc Reject (RejectTransactionSigningRequestRequest) returns (RejectTransactionSigningRequestResponse);
}

message UserContext{
  string pass_client_ip = 1;
  google.protobuf.StringValue user_id = 2;
  google.protobuf.StringValue api_key_id = 3;
  google.protobuf.StringValue account_reference_id = 4;
  google.protobuf.StringValue withdrawal_reference_id = 5;
}

// Get

message GetTransactionSigningRequestRequest {
}

message GetTransactionSigningRequestResponse {
  oneof body {
    .swisschain.sirius.vaultApi.transactions.GetTransactionSigningRequestResponseBody response = 1;
    .swisschain.sirius.vaultApi.transactions.GetTransactionSigningRequestErrorResponseBody error = 2;
  }
}

message GetTransactionSigningRequestResponseBody {
  repeated .swisschain.sirius.vaultApi.transactions.TransactionSigningRequest requests = 1;
}

message GetTransactionSigningRequestErrorResponseBody {

  enum ErrorCode {
    UNKNOWN = 0;
    INVALID_PARAMETERS = 1;
  }

  ErrorCode error_code = 1;
  string error_message = 2;
}

message TransactionSigningRequest {
  int64 id = 1;
  string blockchain_id = 2;
  .swisschain.sirius.vaultApi.common.NetworkType network_type = 3;
  string protocol_code = 4;
  .swisschain.sirius.vaultApi.transactions.DoubleSpendingProtectionType double_spending_protection_type = 5;
  bytes built_transaction = 6;
  repeated string signing_addresses = 7;
  repeated .swisschain.sirius.vaultApi.transactions.CoinToSpend coins_to_spend = 8;
  google.protobuf.Timestamp created_at = 9;
  google.protobuf.Timestamp updated_at = 10;
  UserContext user_context = 11;
}

enum DoubleSpendingProtectionType
{
  COINS = 0;
  NONCE = 1;
}

message CoinToSpend {
  .swisschain.sirius.vaultApi.transactions.CoinId id = 1;
  .swisschain.sirius.vaultApi.transactions.BlockchainAsset asset = 2;
  .swisschain.sirius.vaultApi.common.BigDecimal value = 3;
  google.protobuf.StringValue redeem = 4;
  string address = 5;
}

message CoinId {
  string transaction_id = 1;
  int32 number = 2;
}

message BlockchainAsset {
  BlockchainAssetId id = 1;
  int32 accuracy = 2;
}

message BlockchainAssetId {
  string symbol = 1;
  google.protobuf.StringValue address = 2;
}

// Confirm

message ConfirmTransactionSigningRequestRequest {
  string request_id = 1;
  int64 transaction_signing_request_id = 2;
  string transaction_id = 4;
  bytes signed_transaction = 5;
}

message ConfirmTransactionSigningRequestResponse {
  oneof body {
    ConfirmTransactionSigningRequestResponseBody response = 1;
    ConfirmTransactionSigningRequestErrorResponseBody error = 2;
  }
}

message ConfirmTransactionSigningRequestResponseBody {
}

message ConfirmTransactionSigningRequestErrorResponseBody {

  enum ErrorCode {
    UNKNOWN = 0;
    INVALID_PARAMETERS = 1;
  }

  ErrorCode error_code = 1;
  string error_message = 2;
}

// Reject

message RejectTransactionSigningRequestRequest {
  string request_id = 1;
  int64 transaction_signing_request_id = 2;
  .swisschain.sirius.vaultApi.transactions.TransactionSigningRequestRejectionReason reason = 4;
  string reason_message = 5;
}

enum TransactionSigningRequestRejectionReason {
  OTHER = 0;
  UNKNOWN_BLOCKCHAIN = 1;
  UNWANTED_TRANSACTION = 2;
}

message RejectTransactionSigningRequestResponse {
  oneof body {
    RejectTransactionSigningRequestResponseBody response = 1;
    RejectTransactionSigningRequestErrorResponseBody error = 2;
  }
}

message RejectTransactionSigningRequestResponseBody {
}

message RejectTransactionSigningRequestErrorResponseBody {

  enum ErrorCode {
    UNKNOWN = 0;
    INVALID_PARAMETERS = 1;
  }

  ErrorCode error_code = 1;
  string error_message = 2;
}
