// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using VaultApi.Common.Persistence;

namespace VaultApi.Common.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20200804121505_IndicesImproved")]
    partial class IndicesImproved
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("vault_api")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("VaultApi.Common.ReadModels.Blockchains.Blockchain", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("NetworkType")
                        .HasColumnType("integer");

                    b.Property<string>("TenantId")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("blockchains");
                });

            modelBuilder.Entity("VaultApi.Common.ReadModels.Transactions.TransactionSigningRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("BlockchainId")
                        .HasColumnType("text");

                    b.Property<byte[]>("BuiltTransaction")
                        .HasColumnType("bytea");

                    b.Property<string>("CoinsToSpend")
                        .HasColumnType("text");

                    b.Property<string>("Component")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DoubleSpendingProtectionType")
                        .HasColumnType("integer");

                    b.Property<int>("NetworkType")
                        .HasColumnType("integer");

                    b.Property<long>("OperationId")
                        .HasColumnType("bigint");

                    b.Property<string>("OperationType")
                        .HasColumnType("text");

                    b.Property<string>("ProtocolCode")
                        .HasColumnType("text");

                    b.Property<int?>("RejectionReason")
                        .HasColumnType("integer");

                    b.Property<string>("RejectionReasonMessage")
                        .HasColumnType("text");

                    b.Property<string>("SigningAddresses")
                        .HasColumnType("text");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<string>("TenantId")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("VaultId")
                        .HasColumnType("bigint");

                    b.Property<int>("VaultType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("State");

                    b.HasIndex("TenantId");

                    b.HasIndex("VaultId");

                    b.HasIndex("VaultType");

                    b.ToTable("transaction_signing_requests");
                });

            modelBuilder.Entity("VaultApi.Common.ReadModels.Vaults.Vault", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TenantId")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("vaults");
                });

            modelBuilder.Entity("VaultApi.Common.ReadModels.Wallets.WalletGenerationRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("BlockchainId")
                        .HasColumnType("text");

                    b.Property<string>("Component")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("NetworkType")
                        .HasColumnType("integer");

                    b.Property<string>("ProtocolCode")
                        .HasColumnType("text");

                    b.Property<int?>("RejectionReason")
                        .HasColumnType("integer");

                    b.Property<string>("RejectionReasonMessage")
                        .HasColumnType("text");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<string>("TenantId")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("VaultId")
                        .HasColumnType("bigint");

                    b.Property<int>("VaultType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("State");

                    b.HasIndex("TenantId");

                    b.HasIndex("VaultId");

                    b.HasIndex("VaultType");

                    b.ToTable("wallet_generation_requests");
                });

            modelBuilder.Entity("VaultApi.Common.ReadModels.Blockchains.Blockchain", b =>
                {
                    b.OwnsOne("VaultApi.Common.ReadModels.Blockchains.Protocol", "Protocol", b1 =>
                        {
                            b1.Property<string>("BlockchainId")
                                .HasColumnType("text");

                            b1.Property<string>("Code")
                                .HasColumnName("ProtocolCode")
                                .HasColumnType("text");

                            b1.Property<int>("DoubleSpendingProtectionType")
                                .HasColumnName("DoubleSpendingProtectionType")
                                .HasColumnType("integer");

                            b1.Property<string>("Name")
                                .HasColumnName("ProtocolName")
                                .HasColumnType("text");

                            b1.HasKey("BlockchainId");

                            b1.ToTable("blockchains");

                            b1.WithOwner()
                                .HasForeignKey("BlockchainId");
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
